k = 3;
numOfExec = 100;
img = imread('hand.jpg');

doubleImage = im2double(img);
maxProbability = 0;


%reducing image into 2D array so it could be an input for kmeans algorithm
kmeansInput = reshape(doubleImage,[],3);
maxXout = zeros(size(kmeansInput,1),1);

% repetative kmeans
for i=1:numOfExec
    % Using this to overide the initial input with the defaultvalues 
    initialCenters = initialiseCenters(kmeansInput);
    Xout = kmeans(kmeansInput,3,'Start',initialCenters);
    %clusters=unique(Xout);
    clusterCounts = histc(Xout,[1;2;3]);
    probabilities = sortClustersAndGenerateProbabilities(clusterCounts,[1;2;3]);
    if(probabilities(1,4)>maxProbability)
        maxProbability = probabilities(1,4);
        prob = probabilities(1:3);
        maxXout = Xout;
    end    
end


% figure
% %subplots(10, 10, 'Spacing', 0.5);
% for i=1:numOfExec
%     subplot(10, 10, i);
%     imagesc(prob_map(:,:,i));
%     ax = gca;
%     ax.Position = ax.Position + [0 0.05 0 -0.05];
% end

 
%thresholding image
%prob = prob_map;
maxProb = max(prob);
Xout = maxXout;

prob_function = @(x)binaryDecisionFromProbabilities(x,prob,maxProb);
binaryImage = arrayfun(prob_function,Xout);

binaryImage = reshape(binaryImage,size(img,1,2));
imagesc(binaryImage);
colormap gray;


% takes array of size m*n and returns a random center from it
function center = initialiseCenters(arr)
    len = size(arr);
    center = [arr(randi(len(1)),:);arr(randi(len(1)),:);arr(randi(len(1)),:)];
end

function probabilities = sortClustersAndGenerateProbabilities(clusterCounts,clusters)
    clusterMap = containers.Map(clusters,clusterCounts);
    totalPixels = sum(clusterCounts);
    probabilityMaps = zeros(1,3);
    for i=1:2
       probabilityMaps(i) = round(clusterMap(i)/totalPixels,2);
    end
    probabilityMaps(3) = 1-probabilityMaps(1)-probabilityMaps(2);
    maxProbability = max(probabilityMaps);
    probabilities = [probabilityMaps(1),probabilityMaps(2),probabilityMaps(3),maxProbability];
end

function retElement = binaryDecision(ele,max)
    if(ele>=max)
        retElement = 1;
    else 
        retElement = 0;
    end     
end

function probability = binaryDecisionFromProbabilities(ele,map,max)
switch(ele)
    case 1
        probability = binaryDecision(map(1),max);
    case 2
        probability = binaryDecision(map(2),max);
    otherwise
        probability = binaryDecision(map(3),max);
end    
end



